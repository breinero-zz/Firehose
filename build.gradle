group 'com.bryanreinero'

ext.javaDriverVersion = '3.0.0'
ext.buildDir = './build'

//archivesBaseName = "firehose-core"

allprojects {
    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'maven'



    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
    }

    version = '0.0.1'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

configurations {
    provided
    compile.extendsFrom provided
}

configure(subprojects.findAll { it.name.contains('applications/') }) {
    def appName = project.name.split('/')[1]
    jar {
        baseName = appName
    }
}

project( 'core' ) {

    println System.properties['java.home'];

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
        compile files("${System.properties['java.home']}/../lib/tools.jar")
        compile "org.mongodb:mongo-java-driver:${javaDriverVersion}"
        compile "org.apache.commons:commons-math3:3.0"
        compile "commons-cli:commons-cli:1.2"
        compile group: 'joda-time', name: 'joda-time', version: '2.9.2'
    }

    jar {

        baseName = "Firehose"

        manifest {
            attributes 'Implementation-Title': 'Firehose',
                    'Implementation-Version': version
        }

        zip64 true

        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        } {
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
        }
    }
}

project("applications/LoadGenerator") {
    uploadArchives.onlyIf { false }
    dependencies {
        compile project(':core')
    }

    jar {
        from sourceSets.main.output
        from project(':core').sourceSets.main.output

        configurations.compile.filter {
            it.name.startsWith('mongo-java-driver')
        }.each {
            from zipTree(it)
        }
    }
}

project("applications/DSVImport") {

    dependencies {
        compile project(':core')
    }

    jar {
        from sourceSets.main.output
        from project(':core').sourceSets.main.output

        configurations.compile.each {
            from zipTree(it)
        }
    }

}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'org.codehaus.groovy:groovy-backports-compat23:2.3.5'
        classpath 'org.zeroturnaround:zt-exec:1.6'

        classpath 'com.bmuschko:gradle-nexus-plugin:2.1.1'
        classpath 'me.trnl:clirr-gradle-plugin:0.4'
        classpath 'de.undercouch:gradle-download-task:1.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.6'
    }
}